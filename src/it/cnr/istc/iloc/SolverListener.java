/*
 * Copyright (C) 2017 Riccardo De Benedictis <riccardo.debenedictis@istc.cnr.it>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package it.cnr.istc.iloc;

import java.util.List;

/**
 *
 * @author Riccardo De Benedictis <riccardo.debenedictis@istc.cnr.it>
 */
public interface SolverListener {

    public void init(Solver solver);

    /**
     * Called after the solver moves to node {@code n}. Node {@code n} becomes
     * the current node of the search space.
     *
     * @param n the current node of the search space.
     */
    public void currentNode(Solver.Node n);

    /**
     * Called when an inconsistency is detected on the node {@code n}. A node
     * might become inconsistent, mostly, for an inconsistent constraint
     * network.
     *
     * @param n the node that has become inconsistent. Usually {@code n} is the
     * current node of the search space.
     */
    public void inconsistentNode(Solver.Node n);

    /**
     * Called when a solution is found. A node {@code n} is a solution when it
     * has no flaws and the constraint network is consistent.
     *
     * @param n the node that has been recognized as a solution.
     */
    public void solutionNode(Solver.Node n);

    /**
     * Called when a branch is performed on the search space. A branch in the
     * search space is typically performed for the resolution of some flaw.
     *
     * @param n the node generating the branch. Usually {@code n} is the current
     * node of the search space.
     * @param childs the childs generated by the branch.
     */
    public void branch(Solver.Node n, List<Solver.Node> childs);
}
